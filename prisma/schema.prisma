// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String
  password    String
  isConfirmed Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Личные связи
  accounts     AccountUser[]
  transactions Transaction[]
  categories   Category[]
  budgets      Budget[]

  // Семейные аккаунты
  ownedFamilyAccounts FamilyAccount[] @relation("FamilyOwner")
  familyMemberships   FamilyMember[]

  // Приглашения
  sentInvitations     FamilyInvitation[] @relation("InvitationSender")
  receivedInvitations FamilyInvitation[] @relation("InvitationReceiver")

  @@map("User")
}

model FamilyAccount {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  ownerId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  owner       User             @relation("FamilyOwner", fields: [ownerId], references: [id])
  members     FamilyMember[]
  accounts    Account[]
  invitations FamilyInvitation[]

  @@map("FamilyAccount")
}

model FamilyMember {
  id              Int      @id @default(autoincrement())
  familyAccountId Int
  userId          Int
  role            String   @default("MEMBER") // OWNER, MEMBER
  joinedAt        DateTime @default(now())

  // Связи
  familyAccount FamilyAccount @relation(fields: [familyAccountId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([familyAccountId, userId])
  @@map("FamilyMember")
}

model FamilyInvitation {
  id              Int      @id @default(autoincrement())
  familyAccountId Int
  invitedUserId   Int
  invitedById     Int
  status          String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Связи
  familyAccount FamilyAccount @relation(fields: [familyAccountId], references: [id], onDelete: Cascade)
  invitedUser   User          @relation("InvitationReceiver", fields: [invitedUserId], references: [id], onDelete: Cascade)
  invitedBy     User          @relation("InvitationSender", fields: [invitedById], references: [id], onDelete: Cascade)

  @@map("FamilyInvitation")
}

model Account {
  id              Int           @id @default(autoincrement())
  name            String
  type            AccountType
  balance         Float         @default(0)
  currency        String        @default("RUB")
  color           String        @default("#3B82F6")
  familyAccountId Int?          // Если null - личный счет, если есть значение - семейный
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Связи
  familyAccount FamilyAccount?  @relation(fields: [familyAccountId], references: [id], onDelete: SetNull)
  users         AccountUser[]   // Для личных счетов
  transactions  Transaction[]

  @@map("Account")
}

model AccountUser {
  id        Int @id @default(autoincrement())
  accountId Int
  userId    Int

  // Связи
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([accountId, userId])
  @@map("AccountUser")
}

model Category {
  id           Int          @id @default(autoincrement())
  name         String
  type         CategoryType
  color        String       @default("#3B82F6")
  icon         String?
  userId       Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Связи
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]

  @@map("Category")
}

model Transaction {
  id          Int          @id @default(autoincrement())
  amount      Float
  date        DateTime     @default(now())
  description String
  type        CategoryType
  accountId   Int
  categoryId  Int?
  userId      Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Связи
  account  Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Transaction")
}

model Budget {
  id         Int      @id @default(autoincrement())
  amount     Float
  startDate  DateTime
  endDate    DateTime
  categoryId Int
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Связи
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Budget")
}

enum AccountType {
  BANK
  CASH
  SAVINGS
  INVESTMENT
  CREDIT
}

enum CategoryType {
  INCOME
  EXPENSE
}
