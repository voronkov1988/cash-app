'use client'
import { useState } from 'react'
import {
    Button,
    Modal,
    Form,
    Alert,
    Container,
    Spinner
} from 'react-bootstrap'
import { mutate } from 'swr'
import { Account } from '@/app/types/accounts'
import { fetcher } from '@/app/lib/fetcher'
import { useAccount } from '@/app/context/AccountContext'
import { swrKeys } from '@/app/constants/swrKeys'
import styles from './UsersBlock.module.css'
import { createAccount, loginAccount } from '@/app/utils/accountsApi'

interface UsersBlockProps {
    accounts: Account[]
    currentAccount: Account | null
    userId: number
}

export const UsersBlock = ({
    accounts,
    currentAccount,
    userId
}: UsersBlockProps) => {
    const { setAccount } = useAccount()
    const [formData, setFormData] = useState({
        name: '',
        password: '',
        confirmPass: ''
    })
    const [loginData, setLoginData] = useState({
        name: '',
        password: ''
    })
    const [showCreateModal, setShowCreateModal] = useState(false)
    const [showLoginModal, setShowLoginModal] = useState(false)
    const [error, setError] = useState<string | null>(null)
    const [loginError, setLoginError] = useState<string | null>(null)
    const [validated, setValidated] = useState(false)
    const [isLoggingIn, setIsLoggingIn] = useState(false)

    const handleAccountClick = (account: Account) => {
        setLoginData({
            name: account.name,
            password: ''
        })
        setShowLoginModal(true)
    }

    const handleLogin = async (event: React.FormEvent) => {
        event.preventDefault()
        setIsLoggingIn(true)
        setLoginError(null)
        try {
            const account = await loginAccount(
                loginData.name,
                loginData.password,
                userId
            )
            
            setAccount(account)
            
            setShowLoginModal(false)
            setLoginData({ name: '', password: '' })
        } catch (err) {
            setLoginError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        } finally {
            setIsLoggingIn(false)
        }
    }

    const handleCreateAccount = async (event: React.FormEvent) => {
        event.preventDefault()
        const form = event.currentTarget as HTMLFormElement
        const isFirstAccount = accounts.length === 0

        if (form.checkValidity() === false || formData.password !== formData.confirmPass) {
            event.stopPropagation()
            setValidated(true)
            return
        }

        try {
            await createAccount(
                formData.name.trim(),
                formData.password,
                userId,
                isFirstAccount
            )
            mutate(swrKeys.accounts)
            setFormData({ name: '', password: '', confirmPass: '' })
            setShowCreateModal(false)
            setValidated(false)
        } catch (err) {
            setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        }
    }

    return (
        <Container className="py-4">
            <div className={styles.header}>
                <h1 className={styles.title}>
                    <span className={styles.icon}>üë•</span>
                    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                </h1>
                <p className={styles.subtitle}>
                    –í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π
                </p>
            </div>

            {accounts.length ? (
                <div className={styles.accountsGrid}>
                    {accounts.map(account => (
                        <div 
                            key={account.id}
                            className={`${styles.accountCard} ${currentAccount?.id === account.id ? styles.active : ''}`}
                            onClick={() => handleAccountClick(account)}
                        >
                            <div className={styles.avatar}>
                                <span className={styles.avatarIcon}>üë§</span>
                            </div>
                            <h3 className={styles.accountName}>{account.name}</h3>
                            <p className={styles.accountHint}>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—Ö–æ–¥–∞</p>
                            {currentAccount?.id === account.id && (
                                <div className={styles.activeBadge}>
                                    <span>‚úì –ê–∫—Ç–∏–≤–Ω—ã–π</span>
                                </div>
                            )}
                            <div className={styles.loginButton}>
                                <span>–í–æ–π—Ç–∏</span>
                            </div>
                        </div>
                    ))}
                </div>
            ) : (
                <div className={styles.emptyState}>
                    <div className={styles.emptyIcon}>üéâ</div>
                    <h2 className={styles.emptyTitle}>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h2>
                    <p className={styles.emptyText}>
                        –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.
                    </p>
                </div>
            )}

            <div className={styles.createButtonContainer}>
                <Button
                    variant="primary"
                    size="lg"
                    onClick={() => setShowCreateModal(true)}
                    className={styles.createButton}
                >
                    + –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                </Button>
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ */}
            <Modal show={showCreateModal} onHide={() => setShowCreateModal(false)}>
                <Modal.Header closeButton>
                    <Modal.Title>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <Form noValidate validated={validated} onSubmit={handleCreateAccount}>
                        <Form.Group className="mb-3">
                            <Form.Label>–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞</Form.Label>
                            <Form.Control
                                type="text"
                                required
                                value={formData.name}
                                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞"
                            />
                            <Form.Control.Feedback type="invalid">
                                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
                            </Form.Control.Feedback>
                        </Form.Group>
                        <Form.Group className="mb-3">
                            <Form.Label>–ü–∞—Ä–æ–ª—å</Form.Label>
                            <Form.Control
                                type="password"
                                required
                                minLength={6}
                                value={formData.password}
                                onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                            />
                            <Form.Control.Feedback type="invalid">
                                –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤
                            </Form.Control.Feedback>
                        </Form.Group>
                        <Form.Group className="mb-3">
                            <Form.Label>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</Form.Label>
                            <Form.Control
                                type="password"
                                required
                                value={formData.confirmPass}
                                onChange={(e) => setFormData({ ...formData, confirmPass: e.target.value })}
                                placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                                isInvalid={formData.password !== formData.confirmPass}
                            />
                            <Form.Control.Feedback type="invalid">
                                –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
                            </Form.Control.Feedback>
                        </Form.Group>
                        {error && <Alert variant="danger">{error}</Alert>}
                        <div className="d-flex justify-content-end gap-2">
                            <Button
                                variant="secondary"
                                onClick={() => {
                                    setShowCreateModal(false)
                                    setError(null)
                                }}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </Button>
                            <Button variant="primary" type="submit">
                                –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                            </Button>
                        </div>
                    </Form>
                </Modal.Body>
            </Modal>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç */}
            <Modal show={showLoginModal} onHide={() => setShowLoginModal(false)}>
                <Modal.Header closeButton>
                    <Modal.Title>–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <Form onSubmit={handleLogin}>
                        <Form.Group className="mb-3">
                            <Form.Label>–ü–∞—Ä–æ–ª—å</Form.Label>
                            <Form.Control
                                type="password"
                                required
                                value={loginData.password}
                                onChange={(e) => setLoginData({
                                    ...loginData,
                                    password: e.target.value
                                })}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                            />
                        </Form.Group>
                        {loginError && <Alert variant="danger">{loginError}</Alert>}
                        <div className="d-flex justify-content-end gap-2">
                            <Button
                                variant="secondary"
                                onClick={() => {
                                    setShowLoginModal(false)
                                    setLoginError(null)
                                }}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </Button>
                            <Button
                                variant="primary"
                                type="submit"
                                disabled={isLoggingIn}
                            >
                                {isLoggingIn ? (
                                    <>
                                        <Spinner
                                            as="span"
                                            animation="border"
                                            size="sm"
                                            role="status"
                                            aria-hidden="true"
                                        />
                                        <span className="ms-2">–í—Ö–æ–¥...</span>
                                    </>
                                ) : '–í–æ–π—Ç–∏'}
                            </Button>
                        </div>
                    </Form>
                </Modal.Body>
            </Modal>
        </Container>
    )
}
