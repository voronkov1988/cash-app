'use client'
import { useState } from 'react';
import { Modal, Button, Form, Alert, Spinner } from 'react-bootstrap';
import useSWR, { mutate } from 'swr';
import { swrKeys } from '@/app/constants/swrKeys';
import { fetchCategories } from '@/app/utils/categoriesApi';
import styles from './AddTransactions.module.css';

type TransactionType = "INCOME" | "EXPENSE";

interface Category {
    id: number;
    name: string;
    type: TransactionType;
    color: string;
}

export const AddTransactions = ({ userId, accId, categories, onTransactionAdded  }: any) => {
    const [isOpenIncome, setIsOpenIncome] = useState(false);
    const [isOpenExpense, setIsOpenExpense] = useState(false);
    const [transactionType, setTransactionType] = useState<TransactionType>("EXPENSE");
    const [amount, setAmount] = useState("");
    const [categoryId, setCategoryId] = useState<number | null>(null);
    const [description, setDescription] = useState("");
    const [error, setError] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(false);

    const filteredCategories: Category[] = categories?.filter((cat: Category) => cat.type === transactionType) || [];
    
   const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setIsLoading(true);
        setError(null);

        try {
            if (!amount || isNaN(Number(amount))) {
                throw new Error("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—É—é —Å—É–º–º—É");
            }
            if (!categoryId) {
                throw new Error("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é");
            }

            const body = {
                amount: parseFloat(amount),
                description,
                type: transactionType,
                accountId: accId.account.id,
                userId: userId,
                categoryId: categoryId,
            };

            const res = await fetch("/api/transactions", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(body),
            });

            if (!res.ok) {
                const errData = await res.json();
                throw new Error(errData.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
            }

            // –ü–µ—Ä–µ–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –í–°–ï —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await Promise.all([
                mutate(`${swrKeys.categories}?userId=${userId}`),
                mutate((key) => Array.isArray(key) && key[0] === swrKeys.transactions),
            ]);

            // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
            if (onTransactionAdded) {
                onTransactionAdded();
            }

            transactionType === "INCOME" ? setIsOpenIncome(false) : setIsOpenExpense(false);
            setAmount("");
            setDescription("");
            setCategoryId(null);
        } catch (err: any) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    const openModal = (type: TransactionType) => {
        setTransactionType(type);
        setError(null);
        type === "INCOME" ? setIsOpenIncome(true) : setIsOpenExpense(true);
    };

    const closeModal = (type: TransactionType) => {
        type === "INCOME" ? setIsOpenIncome(false) : setIsOpenExpense(false);
        setAmount("");
        setDescription("");
        setCategoryId(null);
        setError(null);
    };

    return (
        <>
            <div className={styles.buttonsContainer}>
                <Button
                    className={`${styles.actionButton} ${styles.incomeButton}`}
                    onClick={() => openModal("INCOME")}
                    size="lg"
                >
                    <span className={styles.buttonIcon}>üí∞</span>
                    <span className={styles.buttonText}>–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥</span>
                </Button>
                <Button
                    className={`${styles.actionButton} ${styles.expenseButton}`}
                    onClick={() => openModal("EXPENSE")}
                    size="lg"
                >
                    <span className={styles.buttonIcon}>üí∏</span>
                    <span className={styles.buttonText}>–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥</span>
                </Button>
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ */}
            <Modal 
                show={isOpenIncome} 
                onHide={() => closeModal("INCOME")}
                centered
                className={styles.customModal}
            >
                <Modal.Header closeButton className={styles.incomeHeader}>
                    <Modal.Title className={styles.modalTitle}>
                        <span className={styles.modalIcon}>üí∞</span>
                        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
                    </Modal.Title>
                </Modal.Header>
                <Modal.Body className={styles.modalBody}>
                    <Form onSubmit={handleSubmit}>
                        <Form.Group className={styles.formGroup}>
                            <Form.Label className={styles.formLabel}>
                                <span className={styles.labelIcon}>üíµ</span>
                                –°—É–º–º–∞
                            </Form.Label>
                            <Form.Control
                                type="number"
                                step="0.01"
                                value={amount}
                                onChange={(e) => setAmount(e.target.value)}
                                required
                                className={styles.formInput}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                            />
                        </Form.Group>

                        <Form.Group className={styles.formGroup}>
                            <Form.Label className={styles.formLabel}>
                                <span className={styles.labelIcon}>üìù</span>
                                –û–ø–∏—Å–∞–Ω–∏–µ
                            </Form.Label>
                            <Form.Control
                                type="text"
                                value={description}
                                onChange={(e) => setDescription(e.target.value)}
                                className={styles.formInput}
                                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                            />
                        </Form.Group>

                        <Form.Group className={styles.formGroup}>
                            <Form.Label className={styles.formLabel}>
                                <span className={styles.labelIcon}>üè∑Ô∏è</span>
                                –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                            </Form.Label>
                            <Form.Select
                                value={categoryId ?? ""}
                                onChange={(e) => setCategoryId(e.target.value ? Number(e.target.value) : null)}
                                required
                                className={styles.formSelect}
                            >
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                                {filteredCategories.map(cat => (
                                    <option key={cat.id} value={cat.id}>
                                        {cat.name}
                                    </option>
                                ))}
                            </Form.Select>
                        </Form.Group>

                        {error && (
                            <Alert variant="danger" className={styles.errorAlert}>
                                {error}
                            </Alert>
                        )}

                        <div className={styles.modalActions}>
                            <Button
                                variant="outline-secondary"
                                onClick={() => closeModal("INCOME")}
                                className={styles.cancelButton}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </Button>
                            <Button
                                type="submit"
                                disabled={isLoading}
                                className={`${styles.submitButton} ${styles.incomeSubmit}`}
                            >
                                {isLoading ? (
                                    <>
                                        <Spinner
                                            as="span"
                                            animation="border"
                                            size="sm"
                                            role="status"
                                            aria-hidden="true"
                                            className="me-2"
                                        />
                                        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                                    </>
                                ) : (
                                    <>
                                        <span className={styles.submitIcon}>‚úÖ</span>
                                        –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥
                                    </>
                                )}
                            </Button>
                        </div>
                    </Form>
                </Modal.Body>
            </Modal>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ */}
            <Modal 
                show={isOpenExpense} 
                onHide={() => closeModal("EXPENSE")}
                centered
                className={styles.customModal}
            >
                <Modal.Header closeButton className={styles.expenseHeader}>
                    <Modal.Title className={styles.modalTitle}>
                        <span className={styles.modalIcon}>üí∏</span>
                        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
                    </Modal.Title>
                </Modal.Header>
                <Modal.Body className={styles.modalBody}>
                    <Form onSubmit={handleSubmit}>
                        <Form.Group className={styles.formGroup}>
                            <Form.Label className={styles.formLabel}>
                                <span className={styles.labelIcon}>üíµ</span>
                                –°—É–º–º–∞
                            </Form.Label>
                            <Form.Control
                                type="number"
                                step="0.01"
                                value={amount}
                                onChange={(e) => setAmount(e.target.value)}
                                required
                                className={styles.formInput}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                            />
                        </Form.Group>

                        <Form.Group className={styles.formGroup}>
                            <Form.Label className={styles.formLabel}>
                                <span className={styles.labelIcon}>üìù</span>
                                –û–ø–∏—Å–∞–Ω–∏–µ
                            </Form.Label>
                            <Form.Control
                                type="text"
                                value={description}
                                onChange={(e) => setDescription(e.target.value)}
                                className={styles.formInput}
                                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                            />
                        </Form.Group>

                        <Form.Group className={styles.formGroup}>
                            <Form.Label className={styles.formLabel}>
                                <span className={styles.labelIcon}>üè∑Ô∏è</span>
                                –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                            </Form.Label>
                            <Form.Select
                                value={categoryId ?? ""}
                                onChange={(e) => setCategoryId(e.target.value ? Number(e.target.value) : null)}
                                required
                                className={styles.formSelect}
                            >
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                                {filteredCategories.map(cat => (
                                    <option key={cat.id} value={cat.id}>
                                        {cat.name}
                                    </option>
                                ))}
                            </Form.Select>
                        </Form.Group>

                        {error && (
                            <Alert variant="danger" className={styles.errorAlert}>
                                {error}
                            </Alert>
                        )}

                        <div className={styles.modalActions}>
                            <Button
                                variant="outline-secondary"
                                onClick={() => closeModal("EXPENSE")}
                                className={styles.cancelButton}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </Button>
                            <Button
                                type="submit"
                                disabled={isLoading}
                                className={`${styles.submitButton} ${styles.expenseSubmit}`}
                            >
                                {isLoading ? (
                                    <>
                                        <Spinner
                                            as="span"
                                            animation="border"
                                            size="sm"
                                            role="status"
                                            aria-hidden="true"
                                            className="me-2"
                                        />
                                        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                                    </>
                                ) : (
                                    <>
                                        <span className={styles.submitIcon}>‚úÖ</span>
                                        –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
                                    </>
                                )}
                            </Button>
                        </div>
                    </Form>
                </Modal.Body>
            </Modal>
        </>
    );
};
